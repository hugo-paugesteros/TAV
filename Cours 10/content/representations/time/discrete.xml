<?xml version="1.0" encoding="UTF-8"?>

<section title="Du continu au discret">

	<section title="Quantification">
		<wave-visualizer id="quantization"></wave-visualizer>
		<input type="range" name="quantization" id="quantization" min="1" value="8" max="12"/>

		<script type="module">
			import {quantize} from './componentsv2/utils.js'

			var plot = undefined
			let quantizationRange = document.querySelector('input#quantization')
			
			function update() {
				let sr = 44100
				let quantization = quantizationRange.value

				let t = Array(5 * sr).fill().map((_, i) => i / sr)
				let y = t.map(t =>  Math.sin(2 * Math.PI * 440 * t))
				y = quantize(y, quantization)
				
				let slice = Math.round(0.01 * sr)
				let wave_visualizer = document.querySelector('wave-visualizer#quantization')
				wave_visualizer.load(y, sr)
				if (plot) {
					plot.y = y
					plot.render()
				} else {
					plot = wave_visualizer.plot(t.slice(0, slice), y.slice(0, slice))
				}
			}
			
			quantizationRange.addEventListener('change', update)
			window.customElements.whenDefined('wave-visualizer').then(() => {
				update()
			})
		</script>
	</section>

	<section title="Échantillonage">
		<script src="https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js"></script>

		<wave-visualizer id="sampling"></wave-visualizer>
		<input type="range" name="sampling" id="sampling" min="440" step="50" value="1000" max="2000"/>
		<p>Théorème de Nyquist-Shannon : $Fe \geq 2 \cdot f_{max}$</p>

		<script type="module">
			var plot = undefined
			var plotTrue = undefined
			var plotFalse = undefined
			let samplingRange = document.querySelector('input#sampling')
			let wave_visualizer
			
			function update() {
				let sr = samplingRange.value
				let f = 440

				let t = Array(5 * sr).fill().map((_, i) => i / sr)
				let y_true = t.map(t =>  Math.cos(2 * Math.PI * f * t))
				let slice = Math.round(0.01 * sr)
				if (plot) { plot.erase() }
				plot = wave_visualizer.plot(t.slice(0, slice), y_true.slice(0, slice), 'scatter')

				let srr = 44100
				t = Array(5 * srr).fill().map((_, i) => i / srr)
				let y = t.map(t => Math.cos(Math.PI * 2 * Math.min((sr - f), f) * t))
				slice = Math.round(0.01 * srr)
				if (plotFalse) { plotFalse.erase() }
				plotFalse = wave_visualizer.plot(t.slice(0, slice), y.slice(0, slice))
				plotFalse.strokeWidth = 0.005
				plotFalse.color = 'red'

				y = t.map(t =>  Math.cos(2 * Math.PI * f * t))
				slice = Math.round(0.01 * srr)
				if (plotTrue) { plotTrue.erase() }
				plotTrue = wave_visualizer.plot(t.slice(0, slice), y.slice(0, slice))
				plotTrue.strokeWidth = 0.005

				if(sr &lt; 2 * f) {
					LibSampleRate.create(1, sr, 44100, {
						converterType: 1,
					}).then((src) => {
						let y_resampled = src.full(y_true)
						src.destroy()
						wave_visualizer.load(y_resampled, 44100)
					})
				} else {
					wave_visualizer.load(y, 44100)
				}

			}
			
			samplingRange.addEventListener('change', update)
			window.customElements.whenDefined('wave-visualizer').then(() => {
				wave_visualizer = document.querySelector('wave-visualizer#sampling')
				update()
			})
		</script>
	</section>

</section>